// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// PPpred
NumericVector PPpred(NumericMatrix TRstr, NumericMatrix TRprnode, NumericMatrix TRspl, NumericMatrix testdata);
RcppExport SEXP PPforest2_PPpred(SEXP TRstrSEXP, SEXP TRprnodeSEXP, SEXP TRsplSEXP, SEXP testdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type TRstr(TRstrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type TRprnode(TRprnodeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type TRspl(TRsplSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type testdata(testdataSEXP);
    rcpp_result_gen = Rcpp::wrap(PPpred(TRstr, TRprnode, TRspl, testdata));
    return rcpp_result_gen;
END_RCPP
}
// imposoon
NumericMatrix imposoon(NumericMatrix train, NumericVector classes, List oobid, List permute, List trees, IntegerVector noob, List TRstrL, List TRsplL, List TRprnodeL);
RcppExport SEXP PPforest2_imposoon(SEXP trainSEXP, SEXP classesSEXP, SEXP oobidSEXP, SEXP permuteSEXP, SEXP treesSEXP, SEXP noobSEXP, SEXP TRstrLSEXP, SEXP TRsplLSEXP, SEXP TRprnodeLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< List >::type oobid(oobidSEXP);
    Rcpp::traits::input_parameter< List >::type permute(permuteSEXP);
    Rcpp::traits::input_parameter< List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type noob(noobSEXP);
    Rcpp::traits::input_parameter< List >::type TRstrL(TRstrLSEXP);
    Rcpp::traits::input_parameter< List >::type TRsplL(TRsplLSEXP);
    Rcpp::traits::input_parameter< List >::type TRprnodeL(TRprnodeLSEXP);
    rcpp_result_gen = Rcpp::wrap(imposoon(train, classes, oobid, permute, trees, noob, TRstrL, TRsplL, TRprnodeL));
    return rcpp_result_gen;
END_RCPP
}
// LDAindex
double LDAindex(IntegerVector origclass, NumericMatrix origdata, NumericMatrix proj, bool weight);
RcppExport SEXP PPforest2_LDAindex(SEXP origclassSEXP, SEXP origdataSEXP, SEXP projSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proj(projSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(LDAindex(origclass, origdata, proj, weight));
    return rcpp_result_gen;
END_RCPP
}
// LDAopt
List LDAopt(IntegerVector origclass, arma::mat origdata, int q, std::string PPmethod, bool weight);
RcppExport SEXP PPforest2_LDAopt(SEXP origclassSEXP, SEXP origdataSEXP, SEXP qSEXP, SEXP PPmethodSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(LDAopt(origclass, origdata, q, PPmethod, weight));
    return rcpp_result_gen;
END_RCPP
}
// PDAindex
double PDAindex(IntegerVector origclass, NumericMatrix origdata, NumericMatrix proj, bool weight, double lambda);
RcppExport SEXP PPforest2_PDAindex(SEXP origclassSEXP, SEXP origdataSEXP, SEXP projSEXP, SEXP weightSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proj(projSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(PDAindex(origclass, origdata, proj, weight, lambda));
    return rcpp_result_gen;
END_RCPP
}
// PDAopt
List PDAopt(IntegerVector origclass, arma::mat origdata, int q, std::string PPmethod, bool weight, double lambda);
RcppExport SEXP PPforest2_PDAopt(SEXP origclassSEXP, SEXP origdataSEXP, SEXP qSEXP, SEXP PPmethodSEXP, SEXP weightSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(PDAopt(origclass, origdata, q, PPmethod, weight, lambda));
    return rcpp_result_gen;
END_RCPP
}
// split_rel
arma::vec split_rel(IntegerVector origclass, arma::mat origdata, arma::colvec projdata);
RcppExport SEXP PPforest2_split_rel(SEXP origclassSEXP, SEXP origdataSEXP, SEXP projdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type projdata(projdataSEXP);
    rcpp_result_gen = Rcpp::wrap(split_rel(origclass, origdata, projdata));
    return rcpp_result_gen;
END_RCPP
}
// varselect
NumericVector varselect(IntegerVector ids, int sampS, bool replace, NumericVector prob);
RcppExport SEXP PPforest2_varselect(SEXP idsSEXP, SEXP sampSSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< int >::type sampS(sampSSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(varselect(ids, sampS, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
