// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// PPpred
NumericVector PPpred(NumericMatrix TRstr, NumericMatrix TRprnode, NumericMatrix TRspl, NumericMatrix testdata);
RcppExport SEXP PPforest2_PPpred(SEXP TRstrSEXP, SEXP TRprnodeSEXP, SEXP TRsplSEXP, SEXP testdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type TRstr(TRstrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type TRprnode(TRprnodeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type TRspl(TRsplSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type testdata(testdataSEXP);
    rcpp_result_gen = Rcpp::wrap(PPpred(TRstr, TRprnode, TRspl, testdata));
    return rcpp_result_gen;
END_RCPP
}
// imposoon
NumericMatrix imposoon(NumericMatrix train, NumericVector classes, List oobid, List permute, List trees, IntegerVector noob, List TRstrL, List TRsplL, List TRprnodeL);
RcppExport SEXP PPforest2_imposoon(SEXP trainSEXP, SEXP classesSEXP, SEXP oobidSEXP, SEXP permuteSEXP, SEXP treesSEXP, SEXP noobSEXP, SEXP TRstrLSEXP, SEXP TRsplLSEXP, SEXP TRprnodeLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< List >::type oobid(oobidSEXP);
    Rcpp::traits::input_parameter< List >::type permute(permuteSEXP);
    Rcpp::traits::input_parameter< List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type noob(noobSEXP);
    Rcpp::traits::input_parameter< List >::type TRstrL(TRstrLSEXP);
    Rcpp::traits::input_parameter< List >::type TRsplL(TRsplLSEXP);
    Rcpp::traits::input_parameter< List >::type TRprnodeL(TRprnodeLSEXP);
    rcpp_result_gen = Rcpp::wrap(imposoon(train, classes, oobid, permute, trees, noob, TRstrL, TRsplL, TRprnodeL));
    return rcpp_result_gen;
END_RCPP
}
// tableC
arma::vec tableC(arma::vec x);
RcppExport SEXP PPforest2_tableC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tableC(x));
    return rcpp_result_gen;
END_RCPP
}
// LDAindex2
arma::vec LDAindex2(arma::vec origclass, arma::mat origdata, arma::mat proj, bool weight);
RcppExport SEXP PPforest2_LDAindex2(SEXP origclassSEXP, SEXP origdataSEXP, SEXP projSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type proj(projSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(LDAindex2(origclass, origdata, proj, weight));
    return rcpp_result_gen;
END_RCPP
}
// signC
double signC(double x);
RcppExport SEXP PPforest2_signC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(signC(x));
    return rcpp_result_gen;
END_RCPP
}
// LDAopt
arma::vec LDAopt(arma::vec origclass, arma::mat origdata, int q, std::string PPmethod, bool weight);
RcppExport SEXP PPforest2_LDAopt(SEXP origclassSEXP, SEXP origdataSEXP, SEXP qSEXP, SEXP PPmethodSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(LDAopt(origclass, origdata, q, PPmethod, weight));
    return rcpp_result_gen;
END_RCPP
}
// PDAindex2
double PDAindex2(arma::vec origclass, arma::mat origdata, arma::mat proj, bool weight, double lambda);
RcppExport SEXP PPforest2_PDAindex2(SEXP origclassSEXP, SEXP origdataSEXP, SEXP projSEXP, SEXP weightSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type proj(projSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(PDAindex2(origclass, origdata, proj, weight, lambda));
    return rcpp_result_gen;
END_RCPP
}
// PDAopt
arma::vec PDAopt(arma::vec origclass, arma::mat origdata, int q, std::string PPmethod, bool weight, double lambda);
RcppExport SEXP PPforest2_PDAopt(SEXP origclassSEXP, SEXP origdataSEXP, SEXP qSEXP, SEXP PPmethodSEXP, SEXP weightSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< bool >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(PDAopt(origclass, origdata, q, PPmethod, weight, lambda));
    return rcpp_result_gen;
END_RCPP
}
// varselect
arma::uvec varselect(int p, int s);
RcppExport SEXP PPforest2_varselect(SEXP pSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(varselect(p, s));
    return rcpp_result_gen;
END_RCPP
}
// datanode
List datanode(arma::mat origdata, double sizep);
RcppExport SEXP PPforest2_datanode(SEXP origdataSEXP, SEXP sizepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< double >::type sizep(sizepSEXP);
    rcpp_result_gen = Rcpp::wrap(datanode(origdata, sizep));
    return rcpp_result_gen;
END_RCPP
}
// split_rel
arma::vec split_rel(arma::vec origclass, arma::mat origdata, arma::colvec projdata);
RcppExport SEXP PPforest2_split_rel(SEXP origclassSEXP, SEXP origdataSEXP, SEXP projdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type projdata(projdataSEXP);
    rcpp_result_gen = Rcpp::wrap(split_rel(origclass, origdata, projdata));
    return rcpp_result_gen;
END_RCPP
}
// findproj
List findproj(arma::vec origclass, arma::mat origdata, std::string PPmethod, double lambda);
RcppExport SEXP PPforest2_findproj(SEXP origclassSEXP, SEXP origdataSEXP, SEXP PPmethodSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(findproj(origclass, origdata, PPmethod, lambda));
    return rcpp_result_gen;
END_RCPP
}
// findprojPDA
List findprojPDA(arma::vec origclass, arma::mat origdata, double lambda);
RcppExport SEXP PPforest2_findprojPDA(SEXP origclassSEXP, SEXP origdataSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(findprojPDA(origclass, origdata, lambda));
    return rcpp_result_gen;
END_RCPP
}
// findprojLDA
List findprojLDA(arma::vec origclass, arma::mat origdata);
RcppExport SEXP PPforest2_findprojLDA(SEXP origclassSEXP, SEXP origdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    rcpp_result_gen = Rcpp::wrap(findprojLDA(origclass, origdata));
    return rcpp_result_gen;
END_RCPP
}
// arma_sub_cond
arma::uvec arma_sub_cond(arma::vec x, int val);
RcppExport SEXP PPforest2_arma_sub_cond(SEXP xSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_sub_cond(x, val));
    return rcpp_result_gen;
END_RCPP
}
// quantileCpp
double quantileCpp(arma::vec x, double probs);
RcppExport SEXP PPforest2_quantileCpp(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileCpp(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// quant
NumericVector quant(NumericVector x, NumericVector q);
RcppExport SEXP PPforest2_quant(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(quant(x, q));
    return rcpp_result_gen;
END_RCPP
}
// nodestr
arma::vec nodestr(arma::vec classe, arma::vec projdata);
RcppExport SEXP PPforest2_nodestr(SEXP classeSEXP, SEXP projdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type classe(classeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type projdata(projdataSEXP);
    rcpp_result_gen = Rcpp::wrap(nodestr(classe, projdata));
    return rcpp_result_gen;
END_RCPP
}
// findprojwrap
List findprojwrap(arma::vec origclass, arma::mat origdata, std::string PPmethod, double sizep, double lambda);
RcppExport SEXP PPforest2_findprojwrap(SEXP origclassSEXP, SEXP origdataSEXP, SEXP PPmethodSEXP, SEXP sizepSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< double >::type sizep(sizepSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(findprojwrap(origclass, origdata, PPmethod, sizep, lambda));
    return rcpp_result_gen;
END_RCPP
}
// treeconstruct
List treeconstruct(arma::vec origclass, arma::mat origdata, arma::mat Treestruct, int id, int rep, int rep1, int rep2, arma::mat projbestnode, arma::mat splitCutoffnode, std::string PPmethod, double lambda, double sizep);
RcppExport SEXP PPforest2_treeconstruct(SEXP origclassSEXP, SEXP origdataSEXP, SEXP TreestructSEXP, SEXP idSEXP, SEXP repSEXP, SEXP rep1SEXP, SEXP rep2SEXP, SEXP projbestnodeSEXP, SEXP splitCutoffnodeSEXP, SEXP PPmethodSEXP, SEXP lambdaSEXP, SEXP sizepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Treestruct(TreestructSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type rep(repSEXP);
    Rcpp::traits::input_parameter< int >::type rep1(rep1SEXP);
    Rcpp::traits::input_parameter< int >::type rep2(rep2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type projbestnode(projbestnodeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splitCutoffnode(splitCutoffnodeSEXP);
    Rcpp::traits::input_parameter< std::string >::type PPmethod(PPmethodSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sizep(sizepSEXP);
    rcpp_result_gen = Rcpp::wrap(treeconstruct(origclass, origdata, Treestruct, id, rep, rep1, rep2, projbestnode, splitCutoffnode, PPmethod, lambda, sizep));
    return rcpp_result_gen;
END_RCPP
}
// csample_num
arma::vec csample_num(arma::vec x, int size, bool replace, arma::vec prob);
RcppExport SEXP PPforest2_csample_num(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(csample_num(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// boot
arma::vec boot(arma::mat origclass, arma::mat origdata);
RcppExport SEXP PPforest2_boot(SEXP origclassSEXP, SEXP origdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    rcpp_result_gen = Rcpp::wrap(boot(origclass, origdata));
    return rcpp_result_gen;
END_RCPP
}
// trainfn
arma::vec trainfn(arma::mat origclass, arma::mat origdata, double sizetr);
RcppExport SEXP PPforest2_trainfn(SEXP origclassSEXP, SEXP origdataSEXP, SEXP sizetrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type origclass(origclassSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type origdata(origdataSEXP);
    Rcpp::traits::input_parameter< double >::type sizetr(sizetrSEXP);
    rcpp_result_gen = Rcpp::wrap(trainfn(origclass, origdata, sizetr));
    return rcpp_result_gen;
END_RCPP
}
